datasource db {
    provider             = "postgresql"
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    ads           Ad[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Game {
    id        String @id @default(uuid())
    title     String
    bannerUrl String
    ads       Ad[]
}

model Ad {
    id              String   @id @default(uuid())
    gameId          String
    name            String
    yearsPlaying    Int
    discord         String
    weekDays        String
    hourStart       Int
    hourEnd         Int
    useVoiceChannel Boolean  @default(false)
    createAt        DateTime @default(now())
    game            Game     @relation(fields: [gameId], references: [id])
    User            User?    @relation(fields: [userId], references: [id])
    userId          String?
}
